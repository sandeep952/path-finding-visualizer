{"version":3,"sources":["components/InfoModal.js","components/NavBar.js","components/Node/Node.js","components/PathFindingVisualizer.js","algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["tutorial","title","content","image","InfoModal","props","showModal","toggleModal","useState","currStep","setcurrStep","isLastSlide","length","isFirstSlide","Modal","isOpen","toggle","ModalHeader","style","fontSize","className","ModalBody","src","width","height","ModalFooter","Button","color","onClick","disabled","NavBar","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","reset","visualize","Node","this","id","row","col","isStart","isFinish","wallMode","isWall","handleMouseDown","handleMouseUp","handleMouseEnter","toggleStartFinish","onMouseDown","onMouseUp","onMouseEnter","classNames","Component","columns","PathFindingVisualizer","setState","state","getNewGridWithToggledWall","grid","newGrid","isMousePressed","getStatusInfo","status","startRow","finishRow","console","log","startCol","finishCol","distance","bind","toggleWallMode","initalizeGrid","screenSize","window","screen","availWidth","updatedGrid","cols","push","isVisited","location","reload","start","dest","rows","visitedNodes","visited","queue","prev","directions","visRow","prevRow","destinationFound","size","i","currNode","shift","currX","currY","k","direction","nextX","nextY","path","destNode","reverse","traceBackPath","bfs","animateBFS","setTimeout","animatePath","document","getElementById","classList","add","nodeSeq","Fragment","type","checked","onChange","htmlFor","map","rowIndex","lineWidth","element","colIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.7f2c3a79.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst tutorial = [\n  {\n    title: \"Welcome to Pathfinding Visualizer\",\n    content: [\n      `This short tutorial will walk you through all of the features of this application.`,\n      `If you want to dive right in, feel free to press the \"Skip Tutorial\" button below. Otherwise, press \"Next\"!`,\n    ],\n    image: \"\",\n  },\n  {\n    title: \"What is a pathfinding algorithm?\",\n    content: [\n      `A pathfinding algorithm finds the shortest path between two points. This application visualizes Breadth First Search (BFS) pathfinding algorithm!`,\n      `A BFS alogrithm moves level by level.\n      We can either move right,left ,up or down and movements from a node to another have a \"cost\" of 1.`,\n    ],\n    image: \"\",\n  },\n  {\n    title: \"Adding walls \",\n    content: [\n      `You can switch to wall mode by clicking on the checkbox and add walls in the grid.`,\n      `A wall will block the path and will not allow you to go through.`,\n    ],\n    image:\n      \"https://raw.githubusercontent.com/sandeep952/path-finding-visualizer/master/public/wallmode.jpg\",\n  },\n];\n\nconst InfoModal = (props) => {\n  const { showModal, toggleModal } = props;\n\n  const [currStep, setcurrStep] = useState(0);\n\n  const nextStep = () => setcurrStep(currStep + 1);\n\n  const previousStep = () => setcurrStep(currStep - 1);\n  const isLastSlide = currStep === tutorial.length - 1;\n  const isFirstSlide = currStep === 0;\n  const { title, content, image } = tutorial[currStep];\n  return (\n    <div>\n      <Modal isOpen={showModal} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>\n          <span style={{ fontSize: 28 }} className=\"text-center\">\n            {title}\n          </span>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"text-center lead\">\n            <p>{content[0]}</p>\n\n            <p style={{ fontSize: 18 }}>{content[1]}</p>\n\n            {image && <img src={image} width=\"100%\" height=\"100%\" />}\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            {isLastSlide ? \"Finish\" : \"Skip tutorial\"}\n          </Button>\n          {!isFirstSlide && (\n            <Button color=\"primary\" onClick={previousStep}>\n              Previous\n            </Button>\n          )}\n          <Button color=\"primary\" onClick={nextStep} disabled={isLastSlide}>\n            Next\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default InfoModal;\n","import React from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n} from \"reactstrap\";\n\nconst NavBar = (props) => {\n  return (\n    <div>\n      <Navbar color=\"dark\" light expand=\"md\">\n        <NavbarBrand href=\"/\">\n          <h3 className=\"text-white\">Path Finding Visualizer</h3>\n        </NavbarBrand>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <button className=\"btn btn-primary m-1\" onClick={props.reset}>\n              Reset\n            </button>\n            <button className=\"btn btn-warning\" onClick={props.visualize}>\n              Visualize\n            </button>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"./Node.css\";\nimport classNames from \"classnames\";\nclass Node extends Component {\n  render() {\n    let {\n      id,\n      row,\n      col,\n      isStart,\n      isFinish,\n      wallMode,\n      isWall,\n      handleMouseDown,\n      handleMouseUp,\n      handleMouseEnter,\n      toggleStartFinish,\n    } = this.props;\n    return (\n      <div\n        id={id}\n        onClick={!wallMode ? () => toggleStartFinish(row, col) : null}\n        onMouseDown={wallMode ? () => handleMouseDown(row, col) : null}\n        onMouseUp={wallMode ? () => handleMouseUp(row, col) : null}\n        onMouseEnter={wallMode ? () => handleMouseEnter(row, col) : null}\n        className={classNames(\"box border border-primary\", {\n          \"start-node\": isStart,\n          \"destination-node\": isFinish,\n          \"wall-node\": isWall,\n        })}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport { bfs, traceBackPath } from \"../algorithms\";\nimport InfoModal from \"./InfoModal\";\nimport NavBar from \"./NavBar\";\nimport Node from \"./Node/Node\";\nlet rows = 17;\nlet columns = 55;\nclass PathFindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      wallMode: false,\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n      distance: null,\n      showModal: true,\n      isMousePressed: false,\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleWallMode = this.toggleWallMode.bind(this);\n    this.toggleStartFinish = this.toggleStartFinish.bind(this);\n    this.initalizeGrid = this.initalizeGrid.bind(this);\n    this.reset = this.reset.bind(this);\n    this.visualize = this.visualize.bind(this);\n  }\n\n  componentDidMount() {\n    let screenSize = window.screen.availWidth;\n\n    if (screenSize < 1400 && screenSize >= 1000) {\n      columns = 38;\n    } else if (screenSize < 1000 && screenSize >= 780) {\n      columns = 30;\n    } else if (screenSize < 780 && screenSize > 500) {\n      columns = 20;\n    } else if (screenSize < 500) {\n      columns = 14;\n    }\n    this.initalizeGrid();\n  }\n\n  toggleModal = () => {\n    this.setState({\n      showModal: !this.state.showModal,\n    });\n  };\n\n  toggleStartFinish(row, col) {\n    let { grid } = this.state;\n    let { startRow, startCol, finishRow, finishCol } = this.state;\n    let updatedGrid = [...grid];\n\n    if (\n      startRow != null &&\n      startCol != null &&\n      finishRow != null &&\n      finishCol != null\n    )\n      return;\n    if (startRow != null && startCol != null) {\n      updatedGrid[row][col].isFinish = true;\n      finishRow = row;\n      finishCol = col;\n    } else {\n      updatedGrid[row][col].isStart = true;\n      startRow = row;\n      startCol = col;\n    }\n    this.setState({\n      grid: updatedGrid,\n      startRow,\n      startCol,\n      finishRow,\n      finishCol,\n    });\n  }\n  getNewGridWithToggledWall = (row, col) => {\n    let { grid } = this.state;\n    let newGrid = [...grid];\n    newGrid[row][col].isWall = true;\n    return newGrid;\n  };\n\n  initalizeGrid() {\n    let grid = [];\n\n    for (let row = 0; row < rows; row++) {\n      let cols = [];\n      for (let col = 0; col < columns; col++) {\n        cols.push({\n          row,\n          col,\n          isStart: false,\n          isFinish: false,\n          isVisited: false,\n        });\n      }\n      grid.push(cols);\n    }\n    this.setState({\n      grid,\n      wallMode: false,\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n      distance: null,\n      showModal: true,\n      isMousePressed: false,\n    });\n  }\n\n  reset() {\n    // this.initalizeGrid();\n    window.location.reload();\n  }\n\n  visualize() {\n    let { grid, startRow, startCol, finishRow, finishCol } = this.state;\n    if (\n      startRow == null ||\n      startCol == null ||\n      !finishRow == null ||\n      finishCol == null\n    )\n      return;\n\n    let { visitedNodes, path, distance } = bfs(\n      grid[startRow][startCol],\n      grid[finishRow][finishCol],\n      grid,\n      rows,\n      columns\n    );\n\n    this.animateBFS(visitedNodes, grid);\n    setTimeout(() => {\n      this.animatePath(path);\n      this.setState({\n        distance,\n      });\n    }, visitedNodes.length * 25);\n  }\n\n  handleMouseDown = (row, col) => {\n    let newGrid = this.getNewGridWithToggledWall(row, col);\n    this.setState({\n      grid: newGrid,\n      isMousePressed: true,\n    });\n  };\n\n  handleMouseUp = () => {\n    this.setState({\n      isMousePressed: false,\n    });\n  };\n\n  handleMouseEnter = (row, col) => {\n    let { isMousePressed } = this.state;\n    if (isMousePressed) {\n      let newGrid = this.getNewGridWithToggledWall(row, col);\n      this.setState({\n        grid: newGrid,\n      });\n    }\n  };\n\n  animatePath(path) {\n    for (let i = 1; i < path.length - 1; i++) {\n      setTimeout(() => {\n        let currNode = path[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"path-node\");\n      }, i * 25);\n    }\n  }\n\n  animateBFS(nodeSeq, grid) {\n    for (let i = 1; i < nodeSeq.length - 1; i++) {\n      setTimeout(() => {\n        let currNode = nodeSeq[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"visited-node\");\n      }, i * 25);\n    }\n  }\n  toggleWallMode() {\n    this.setState({\n      wallMode: !this.state.wallMode,\n    });\n  }\n\n  getStatusInfo = () => {\n    let status = \"default\";\n    let { wallMode, startRow, finishRow } = this.state;\n    if (wallMode) {\n      status = \"Click on the blocks to add walls\";\n    } else if (startRow != null && finishRow != null) {\n      status = \"Ready to visualise\";\n    } else if (startRow != null) {\n      status = \"Select destination\";\n    } else {\n      status = \"Select source\";\n    }\n    console.log(status);\n    return status;\n  };\n\n  render() {\n    let { grid, distance, wallMode, showModal } = this.state;\n    return (\n      <React.Fragment>\n        <NavBar visualize={this.visualize} reset={this.reset} />\n        <InfoModal showModal={showModal} toggleModal={this.toggleModal} />\n\n        <div className=\"m-1\"></div>\n\n        <div className=\"info-tab\">\n          <div className=\"box start-node\"></div>\n          <span className=\"info-text\">Start</span>\n        </div>\n\n        <div className=\"info-tab\">\n          <div className=\"box destination-node\"></div>\n          <span className=\"info-text\"> Destination</span>\n        </div>\n        <div className=\"info-tab\">\n          <div className=\"box visited-node\"></div>\n          <span className=\"info-text\">Visited</span>\n        </div>\n        <div className=\"info-tab\">\n          <div className=\"box path-node\"></div>\n          <span className=\"info-text\">Path</span>\n        </div>\n        <div className=\"info-tab\">\n          <div className=\"box wall-node\"></div>\n          <span className=\"info-text\">Wall</span>\n        </div>\n\n        <div className=\"custom-control custom-checkbox mb-3\">\n          <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            id=\"wallMode\"\n            checked={wallMode}\n            onChange={this.toggleWallMode}\n          />\n          <label className=\"custom-control-label\" htmlFor=\"wallMode\">\n            Wall Mode\n          </label>\n        </div>\n        <span className=\"bg-dark text-white font-weight-light p-2 m-1\">\n          {!distance && this.getStatusInfo()}\n          {distance &&\n            (distance !== -1\n              ? `Shortest Distance is ${distance}`\n              : \"NO PATH FOUND\")}\n        </span>\n        <div className=\"visualizer mt-3\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={`row${rowIndex}`} style={{ lineWidth: \"0px\" }}>\n                {row.map((element, colIndex) => (\n                  <Node\n                    id={`node-${rowIndex}-${colIndex}`}\n                    wallMode={wallMode}\n                    handleMouseDown={this.handleMouseDown}\n                    handleMouseEnter={this.handleMouseEnter}\n                    handleMouseUp={this.handleMouseUp}\n                    key={`node-${rowIndex}-${colIndex}`}\n                    {...grid[rowIndex][colIndex]}\n                    toggleStartFinish={() =>\n                      this.toggleStartFinish(rowIndex, colIndex)\n                    }\n                  />\n                ))}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PathFindingVisualizer;\n","export function bfs(start, dest, grid, rows, cols) {\n  // list to store the sequence of visited nodes\n  let visitedNodes = [];\n  let visited = [];\n  let queue = [];\n  let prev = [];\n  const directions = [\n    [0, 1], //up\n    [1, 0], //right\n    [0, -1], //down\n    [-1, 0], //left\n  ];\n\n  for (let row = 0; row < rows; row++) {\n    let visRow = [];\n    let prevRow = [];\n    for (let col = 0; col < cols; col++) {\n      visRow.push(false);\n      prevRow.push(null);\n    }\n    visited.push(visRow);\n    prev.push(prevRow);\n  }\n\n  queue.push(start);\n  visited[start.row][start.col] = true;\n\n  let distance = 0;\n  let destinationFound = false;\n  while (queue.length !== 0 && !destinationFound) {\n    let size = queue.length;\n    for (let i = 0; i < size; i++) {\n      let currNode = queue.shift();\n      let currX = currNode.row;\n      let currY = currNode.col;\n\n      visitedNodes.push(currNode);\n\n      for (let k = 0; k < directions.length; k++) {\n        let direction = directions[k];\n        let nextX = currX + direction[0];\n        let nextY = currY + direction[1];\n\n        if (\n          nextX >= 0 &&\n          nextX < rows &&\n          nextY >= 0 &&\n          nextY < cols &&\n          !visited[nextX][nextY]\n        ) {\n          if(grid[nextX][nextY].isWall)\n          continue\n          if (nextX === dest.row && nextY === dest.col) {\n            prev[nextX][nextY] = currNode;\n            destinationFound = true;\n            break;\n          }\n\n          queue.push(grid[nextX][nextY]);\n          prev[nextX][nextY] = currNode;\n          visited[nextX][nextY] = true;\n        }\n      }\n    }\n    distance++;\n  }\n  let path = traceBackPath(grid, prev, dest);\n  if(!path[0].isStart){\n    distance = -1;\n  }\n  return {\n    visitedNodes,\n    path,\n    distance,\n  };\n}\n\nexport function traceBackPath(grid, prev, destNode) {\n  let path = [];\n  let currNode = grid[destNode.row][destNode.col];\n  while (currNode != null) {\n    path.push(currNode);\n    currNode = prev[currNode.row][currNode.col];\n  }\n  path.reverse();\n  return path;\n}\n","import \"./App.css\";\nimport PathFindingVisualizer from \"./components/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}