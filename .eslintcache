[{"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\index.js":"1","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\reportWebVitals.js":"2","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\App.js":"3","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\components\\PathFindingVisualizer.js":"4","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\components\\Node\\Node.js":"5","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\algorithms.js":"6"},{"size":457,"mtime":1607062274015,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":223,"mtime":1607064524262,"results":"10","hashOfConfig":"8"},{"size":4604,"mtime":1607096864997,"results":"11","hashOfConfig":"8"},{"size":486,"mtime":1607089993708,"results":"12","hashOfConfig":"8"},{"size":1939,"mtime":1607095296324,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1d8i2oi",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\index.js",[],["30","31"],"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\reportWebVitals.js",[],"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\App.js",[],"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\components\\PathFindingVisualizer.js",["32"],"import React, { Component } from \"react\";\nimport { bfs, traceBackPath } from \"../algorithms\";\nimport Node from \"./Node/Node\";\nlet rows = 20;\nlet columns = 50;\nclass PathFindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n      distance: null,\n    };\n    this.toggleStartFinish = this.toggleStartFinish.bind(this);\n    this.initalizeGrid = this.initalizeGrid.bind(this);\n    this.reset = this.reset.bind(this);\n    this.visualize = this.visualize.bind(this);\n  }\n\n  componentDidMount() {\n    let screenSize = window.screen.availWidth;\n    if(screenSize>=1300){\n      rows = 20\n      columns = 50\n    }\n    else if (screenSize < 1300 && screenSize > 700) {\n      rows = 20;\n      columns = 25;\n    } else if (screenSize < 700 && screenSize > 500){\n      rows = 15;\n      columns = 20;\n    }\n    else{\n      rows = 15\n      columns = 15\n    }\n    this.initalizeGrid();\n  }\n\n  toggleStartFinish(row, col) {\n    let { grid } = this.state;\n    let { startRow, startCol, finishRow, finishCol } = this.state;\n    let updatedGrid = [...grid];\n\n    if (\n      startRow != null &&\n      startCol != null &&\n      finishRow != null &&\n      finishCol != null\n    )\n      return;\n    if (startRow != null && startCol != null) {\n      updatedGrid[row][col].isFinish = true;\n      finishRow = row;\n      finishCol = col;\n    } else {\n      updatedGrid[row][col].isStart = true;\n      startRow = row;\n      startCol = col;\n    }\n    this.setState({\n      grid: updatedGrid,\n      startRow,\n      startCol,\n      finishRow,\n      finishCol,\n    });\n  }\n\n  initalizeGrid() {\n    let grid = [];\n\n    for (let row = 0; row < rows; row++) {\n      let cols = [];\n      for (let col = 0; col < columns; col++) {\n        cols.push({\n          row,\n          col,\n          isStart: false,\n          isFinish: false,\n          isVisited: false,\n        });\n      }\n      grid.push(cols);\n    }\n    this.setState({\n      grid,\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n    });\n  }\n\n  reset() {\n    // this.initalizeGrid();\n    window.location.reload();\n  }\n\n  visualize() {\n    let { grid, startRow, startCol, finishRow, finishCol } = this.state;\n    if (\n      startRow == null ||\n      startCol == null ||\n      !finishRow == null ||\n      finishCol == null\n    )\n      return;\n\n    let { visitedNodes, path, distance } = bfs(\n      grid[startRow][startCol],\n      grid[finishRow][finishCol],\n      grid,\n      rows,\n      columns\n    );\n\n    this.animateBFS(visitedNodes, grid);\n    setTimeout(() => {\n      this.animatePath(path);\n      this.setState({\n        distance,\n      });\n    }, visitedNodes.length * 25);\n  }\n\n  animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        let currNode = path[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"path-node\");\n      }, i * 25);\n    }\n  }\n\n  animateBFS(nodeSeq, grid) {\n    for (let i = 0; i < nodeSeq.length; i++) {\n      setTimeout(() => {\n        let currNode = nodeSeq[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"visited-node\");\n      }, i * 25);\n    }\n  }\n\n  render() {\n    let { grid, distance } = this.state;\n    return (\n      <React.Fragment>\n        <h1>Path Finding Visualizer</h1>\n\n        <button className=\"btn btn-primary m-2\" onClick={this.reset}>\n          Reset\n        </button>\n\n        <button className=\"btn btn-warning\" onClick={this.visualize}>\n          Visualize\n        </button>\n        <p\n          className=\"distance\"\n          style={{ visibility: distance ? \"visible\" : \"hidden\" }}\n        >\n          Shortest Distance is {distance}\n        </p>\n        <div className=\"visualizer\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={`row${rowIndex}`} style={{ lineWidth: \"0px\" }}>\n                {row.map((element, colIndex) => (\n                  <Node\n                    id={`node-${rowIndex}-${colIndex}`}\n                    key={`node-${rowIndex}-${colIndex}`}\n                    {...grid[rowIndex][colIndex]}\n                    toggleStartFinish={() =>\n                      this.toggleStartFinish(rowIndex, colIndex)\n                    }\n                  />\n                ))}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PathFindingVisualizer;\n","F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\components\\Node\\Node.js",["33"],"import React, { Component } from \"react\";\nimport \"./Node.css\";\nimport classNames from \"classnames\";\nclass Node extends Component {\n  render() {\n    let { id, isStart, isFinish, toggleStartFinish, isVisited } = this.props;\n    return (\n      <div\n        id={id}\n        onClick={toggleStartFinish}\n        className={classNames(\"box border border-primary\", {\n          \"bg-warning\": isStart,\n          \"bg-danger\": isFinish,\n        })}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n",["34","35"],"F:\\Sandeep\\WEB\\react\\path-finding-visualizer\\src\\algorithms.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":15,"nodeType":"42","messageId":"43","endLine":2,"endColumn":28},{"ruleId":"40","severity":1,"message":"44","line":6,"column":53,"nodeType":"42","messageId":"43","endLine":6,"endColumn":62},{"ruleId":"36","replacedBy":"45"},{"ruleId":"38","replacedBy":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'traceBackPath' is defined but never used.","Identifier","unusedVar","'isVisited' is assigned a value but never used.",["47"],["48"],"no-global-assign","no-unsafe-negation"]