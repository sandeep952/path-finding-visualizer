{"version":3,"sources":["components/InfoModal.js","components/NavBar.js","components/Node/Node.js","components/PathFindingVisualizer.js","algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["tutorial","title","content","image","InfoModal","props","showModal","toggleModal","useState","currStep","setcurrStep","isLastSlide","length","isFirstSlide","Modal","isOpen","toggle","ModalHeader","style","fontSize","className","ModalBody","src","width","height","ModalFooter","Button","color","onClick","disabled","NavBar","Navbar","light","expand","NavbarBrand","href","Nav","navbar","NavItem","reset","visualize","Node","this","id","row","col","isStart","isFinish","wallMode","isWall","handleMouseDown","handleMouseUp","handleMouseEnter","toggleStartFinish","onMouseDown","onMouseUp","onMouseEnter","classNames","Component","rows","columns","PathFindingVisualizer","setState","state","getNewGridWithToggledWall","grid","newGrid","isMousePressed","getStatusInfo","status","startRow","finishRow","console","log","startCol","finishCol","distance","bind","toggleWallMode","initalizeGrid","screenSize","window","screen","availWidth","updatedGrid","alert","cols","push","isVisited","location","reload","start","dest","visitedNodes","visited","queue","prev","directions","visRow","prevRow","destinationFound","size","i","currNode","shift","currX","currY","k","direction","nextX","nextY","path","destNode","reverse","traceBackPath","bfs","animateBFS","setTimeout","animatePath","document","getElementById","classList","add","nodeSeq","Fragment","type","checked","onChange","htmlFor","map","rowIndex","lineWidth","element","colIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.b05e92d6.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\n\r\nconst tutorial = [\r\n  {\r\n    title: \"Welcome to Pathfinding Visualizer\",\r\n    content: [\r\n      `This short tutorial will walk you through all of the features of this application.`,\r\n      `If you want to dive right in, feel free to press the \"Skip Tutorial\" button below. Otherwise, press \"Next\"!`,\r\n    ],\r\n    image: \"\",\r\n  },\r\n  {\r\n    title: \"What is a pathfinding algorithm?\",\r\n    content: [\r\n      `A pathfinding algorithm finds the shortest path between two points. This application visualizes Breadth First Search (BFS) pathfinding algorithm!`,\r\n      `A BFS alogrithm moves level by level.\r\n      We can either move right,left ,up or down and movements from a node to another have a \"cost\" of 1.`,\r\n    ],\r\n    image: \"\",\r\n  },\r\n  {\r\n    title: \"Adding walls \",\r\n    content: [\r\n      `You can switch to wall mode by clicking on the checkbox and add walls in the grid.`,\r\n      `A wall will block the path and will not allow you to go through.`,\r\n    ],\r\n    image:\r\n      \"https://raw.githubusercontent.com/sandeep952/path-finding-visualizer/master/public/wallmode.jpg\",\r\n  },\r\n];\r\n\r\nconst InfoModal = (props) => {\r\n  const { showModal, toggleModal } = props;\r\n\r\n  const [currStep, setcurrStep] = useState(0);\r\n\r\n  const nextStep = () => setcurrStep(currStep + 1);\r\n\r\n  const previousStep = () => setcurrStep(currStep - 1);\r\n  const isLastSlide = currStep === tutorial.length - 1;\r\n  const isFirstSlide = currStep === 0;\r\n  const { title, content, image } = tutorial[currStep];\r\n  return (\r\n    <div>\r\n      <Modal isOpen={showModal} toggle={toggleModal}>\r\n        <ModalHeader toggle={toggleModal}>\r\n          <span style={{ fontSize: 28 }} className=\"text-center\">\r\n            {title}\r\n          </span>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"text-center lead\">\r\n            <p>{content[0]}</p>\r\n\r\n            <p style={{ fontSize: 18 }}>{content[1]}</p>\r\n\r\n            {image && <img src={image} width=\"100%\" height=\"100%\" />}\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggleModal}>\r\n            {isLastSlide ? \"Finish\" : \"Skip tutorial\"}\r\n          </Button>\r\n          {!isFirstSlide && (\r\n            <Button color=\"primary\" onClick={previousStep}>\r\n              Previous\r\n            </Button>\r\n          )}\r\n          <Button color=\"primary\" onClick={nextStep} disabled={isLastSlide}>\r\n            Next\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoModal;\r\n","import React from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  NavbarText,\r\n} from \"reactstrap\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <div>\r\n      <Navbar color=\"dark\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">\r\n          <h3 className=\"text-white\">Path Finding Visualizer</h3>\r\n        </NavbarBrand>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <button className=\"btn btn-primary m-1\" onClick={props.reset}>\r\n              Reset\r\n            </button>\r\n            <button className=\"btn btn-warning\" onClick={props.visualize}>\r\n              Visualize\r\n            </button>\r\n          </NavItem>\r\n        </Nav>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\nimport classNames from \"classnames\";\r\nclass Node extends Component {\r\n  render() {\r\n    let {\r\n      id,\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      wallMode,\r\n      isWall,\r\n      handleMouseDown,\r\n      handleMouseUp,\r\n      handleMouseEnter,\r\n      toggleStartFinish,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        id={id}\r\n        onClick={!wallMode ? () => toggleStartFinish(row, col) : null}\r\n        onMouseDown={wallMode ? () => handleMouseDown(row, col) : null}\r\n        onMouseUp={wallMode ? () => handleMouseUp(row, col) : null}\r\n        onMouseEnter={wallMode ? () => handleMouseEnter(row, col) : null}\r\n        className={classNames(\"box \", {\r\n          \"start-node\": isStart,\r\n          \"destination-node\": isFinish,\r\n          \"wall-node\": isWall,\r\n        })}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport { bfs, traceBackPath } from \"../algorithms\";\r\nimport InfoModal from \"./InfoModal\";\r\nimport NavBar from \"./NavBar\";\r\nimport Node from \"./Node/Node\";\r\nlet rows = 20;\r\nlet columns = 55;\r\nclass PathFindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      wallMode: false,\r\n      startRow: null,\r\n      startCol: null,\r\n      finishRow: null,\r\n      finishCol: null,\r\n      distance: null,\r\n      showModal: true,\r\n      isMousePressed: false,\r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.toggleWallMode = this.toggleWallMode.bind(this);\r\n    this.toggleStartFinish = this.toggleStartFinish.bind(this);\r\n    this.initalizeGrid = this.initalizeGrid.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.visualize = this.visualize.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let screenSize = window.screen.availWidth;\r\n\r\n    if (screenSize < 1400 && screenSize >= 1000) {\r\n      columns = 38;\r\n      rows = 17;\r\n    } else if (screenSize < 1000 && screenSize >= 780) {\r\n      columns = 30;\r\n      rows = 17;\r\n    } else if (screenSize < 780 && screenSize > 500) {\r\n      columns = 20;\r\n      rows = 17;\r\n    } else if (screenSize < 500) {\r\n      columns = 14;\r\n      rows = 17;\r\n    }\r\n    this.initalizeGrid();\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      showModal: !this.state.showModal,\r\n    });\r\n  };\r\n\r\n  toggleStartFinish(row, col) {\r\n    let { grid } = this.state;\r\n    let { startRow, startCol, finishRow, finishCol } = this.state;\r\n    let updatedGrid = [...grid];\r\n\r\n    if (\r\n      startRow != null &&\r\n      startCol != null &&\r\n      finishRow != null &&\r\n      finishCol != null\r\n    )\r\n      return;\r\n    if (startRow != null && startCol != null) {\r\n      if (startRow === row && startCol === col)\r\n        return alert(\"destination cannot be same as source\");\r\n\r\n      updatedGrid[row][col].isFinish = true;\r\n      finishRow = row;\r\n      finishCol = col;\r\n    } else {\r\n      updatedGrid[row][col].isStart = true;\r\n      startRow = row;\r\n      startCol = col;\r\n    }\r\n    this.setState({\r\n      grid: updatedGrid,\r\n      startRow,\r\n      startCol,\r\n      finishRow,\r\n      finishCol,\r\n    });\r\n  }\r\n  getNewGridWithToggledWall = (row, col) => {\r\n    let { grid } = this.state;\r\n    let newGrid = [...grid];\r\n    newGrid[row][col].isWall = true;\r\n    return newGrid;\r\n  };\r\n\r\n  initalizeGrid() {\r\n    let grid = [];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      let cols = [];\r\n      for (let col = 0; col < columns; col++) {\r\n        cols.push({\r\n          row,\r\n          col,\r\n          isStart: false,\r\n          isFinish: false,\r\n          isVisited: false,\r\n        });\r\n      }\r\n      grid.push(cols);\r\n    }\r\n    this.setState({\r\n      grid,\r\n      wallMode: false,\r\n      startRow: null,\r\n      startCol: null,\r\n      finishRow: null,\r\n      finishCol: null,\r\n      distance: null,\r\n      showModal: true,\r\n      isMousePressed: false,\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    // this.initalizeGrid();\r\n    window.location.reload();\r\n  }\r\n\r\n  visualize() {\r\n    let { grid, startRow, startCol, finishRow, finishCol } = this.state;\r\n    if (startRow == null) return alert(\"Select source\");\r\n    else if (finishRow == null) return alert(\"Select destination\");\r\n\r\n    let { visitedNodes, path, distance } = bfs(\r\n      grid[startRow][startCol],\r\n      grid[finishRow][finishCol],\r\n      grid,\r\n      rows,\r\n      columns\r\n    );\r\n\r\n    this.animateBFS(visitedNodes, grid);\r\n    setTimeout(() => {\r\n      this.animatePath(path);\r\n      this.setState({\r\n        distance,\r\n      });\r\n    }, visitedNodes.length * 25);\r\n  }\r\n\r\n  handleMouseDown = (row, col) => {\r\n    let newGrid = this.getNewGridWithToggledWall(row, col);\r\n    this.setState({\r\n      grid: newGrid,\r\n      isMousePressed: true,\r\n    });\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({\r\n      isMousePressed: false,\r\n    });\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    let { isMousePressed } = this.state;\r\n    if (isMousePressed) {\r\n      let newGrid = this.getNewGridWithToggledWall(row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n      });\r\n    }\r\n  };\r\n\r\n  animatePath(path) {\r\n    for (let i = 1; i < path.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let currNode = path[i];\r\n        document\r\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\r\n          .classList.add(\"path-node\");\r\n      }, i * 25);\r\n    }\r\n  }\r\n\r\n  animateBFS(nodeSeq, grid) {\r\n    for (let i = 1; i < nodeSeq.length - 1; i++) {\r\n      setTimeout(() => {\r\n        let currNode = nodeSeq[i];\r\n        document\r\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\r\n          .classList.add(\"visited-node\");\r\n      }, i * 25);\r\n    }\r\n  }\r\n  toggleWallMode() {\r\n    this.setState({\r\n      wallMode: !this.state.wallMode,\r\n    });\r\n  }\r\n\r\n  getStatusInfo = () => {\r\n    let status = \"default\";\r\n    let { wallMode, startRow, finishRow } = this.state;\r\n    if (wallMode) {\r\n      status = \"Click on the blocks to add walls\";\r\n    } else if (startRow != null && finishRow != null) {\r\n      status = \"Ready to visualise\";\r\n    } else if (startRow != null) {\r\n      status = \"Select destination\";\r\n    } else {\r\n      status = \"Select source\";\r\n    }\r\n    console.log(status);\r\n    return status;\r\n  };\r\n\r\n  render() {\r\n    let { grid, distance, wallMode, showModal } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar visualize={this.visualize} reset={this.reset} />\r\n        <InfoModal showModal={showModal} toggleModal={this.toggleModal} />\r\n\r\n        <div className=\"m-1\"></div>\r\n\r\n        <div className=\"info-tab\">\r\n          <div className=\"box start-node\"></div>\r\n          <span className=\"info-text\">Start</span>\r\n        </div>\r\n\r\n        <div className=\"info-tab\">\r\n          <div className=\"box destination-node\"></div>\r\n          <span className=\"info-text\"> Destination</span>\r\n        </div>\r\n        <div className=\"info-tab\">\r\n          <div className=\"box visited-node\"></div>\r\n          <span className=\"info-text\">Visited</span>\r\n        </div>\r\n        <div className=\"info-tab\">\r\n          <div className=\"box path-node\"></div>\r\n          <span className=\"info-text\">Path</span>\r\n        </div>\r\n        <div className=\"info-tab\">\r\n          <div className=\"box wall-node\"></div>\r\n          <span className=\"info-text\">Wall</span>\r\n        </div>\r\n\r\n        <div className=\"custom-control custom-checkbox mb-3\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            id=\"wallMode\"\r\n            checked={wallMode}\r\n            onChange={this.toggleWallMode}\r\n          />\r\n          <label className=\"custom-control-label\" htmlFor=\"wallMode\">\r\n            Wall Mode\r\n          </label>\r\n        </div>\r\n        <span className=\"bg-dark text-white font-weight-light p-2 m-1\">\r\n          {!distance && this.getStatusInfo()}\r\n          {distance &&\r\n            (distance !== -1\r\n              ? `Shortest Distance is ${distance}`\r\n              : \"NO PATH FOUND\")}\r\n        </span>\r\n        <div className=\"visualizer mt-3\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div\r\n                className=\"gridRow\"\r\n                key={`row${rowIndex}`}\r\n                style={{ lineWidth: \"0px\" }}\r\n              >\r\n                {row.map((element, colIndex) => (\r\n                  <Node\r\n                    id={`node-${rowIndex}-${colIndex}`}\r\n                    wallMode={wallMode}\r\n                    handleMouseDown={this.handleMouseDown}\r\n                    handleMouseEnter={this.handleMouseEnter}\r\n                    handleMouseUp={this.handleMouseUp}\r\n                    key={`node-${rowIndex}-${colIndex}`}\r\n                    {...grid[rowIndex][colIndex]}\r\n                    toggleStartFinish={() =>\r\n                      this.toggleStartFinish(rowIndex, colIndex)\r\n                    }\r\n                  />\r\n                ))}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFindingVisualizer;\r\n","export function bfs(start, dest, grid, rows, cols) {\r\n  // list to store the sequence of visited nodes\r\n  let visitedNodes = [];\r\n  let visited = [];\r\n  let queue = [];\r\n  let prev = [];\r\n  const directions = [\r\n    [0, 1], //up\r\n    [1, 0], //right\r\n    [0, -1], //down\r\n    [-1, 0], //left\r\n  ];\r\n\r\n  for (let row = 0; row < rows; row++) {\r\n    let visRow = [];\r\n    let prevRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      visRow.push(false);\r\n      prevRow.push(null);\r\n    }\r\n    visited.push(visRow);\r\n    prev.push(prevRow);\r\n  }\r\n\r\n  queue.push(start);\r\n  visited[start.row][start.col] = true;\r\n\r\n  let distance = 0;\r\n  let destinationFound = false;\r\n  while (queue.length !== 0 && !destinationFound) {\r\n    let size = queue.length;\r\n    for (let i = 0; i < size; i++) {\r\n      let currNode = queue.shift();\r\n      let currX = currNode.row;\r\n      let currY = currNode.col;\r\n\r\n      visitedNodes.push(currNode);\r\n\r\n      for (let k = 0; k < directions.length; k++) {\r\n        let direction = directions[k];\r\n        let nextX = currX + direction[0];\r\n        let nextY = currY + direction[1];\r\n\r\n        if (\r\n          nextX >= 0 &&\r\n          nextX < rows &&\r\n          nextY >= 0 &&\r\n          nextY < cols &&\r\n          !visited[nextX][nextY]\r\n        ) {\r\n          if(grid[nextX][nextY].isWall)\r\n          continue\r\n          if (nextX === dest.row && nextY === dest.col) {\r\n            prev[nextX][nextY] = currNode;\r\n            destinationFound = true;\r\n            break;\r\n          }\r\n\r\n          queue.push(grid[nextX][nextY]);\r\n          prev[nextX][nextY] = currNode;\r\n          visited[nextX][nextY] = true;\r\n        }\r\n      }\r\n    }\r\n    distance++;\r\n  }\r\n  let path = traceBackPath(grid, prev, dest);\r\n  if(!path[0].isStart){\r\n    distance = -1;\r\n  }\r\n  return {\r\n    visitedNodes,\r\n    path,\r\n    distance,\r\n  };\r\n}\r\n\r\nexport function traceBackPath(grid, prev, destNode) {\r\n  let path = [];\r\n  let currNode = grid[destNode.row][destNode.col];\r\n  while (currNode != null) {\r\n    path.push(currNode);\r\n    currNode = prev[currNode.row][currNode.col];\r\n  }\r\n  path.reverse();\r\n  return path;\r\n}\r\n","import \"./App.css\";\r\nimport PathFindingVisualizer from \"./components/PathFindingVisualizer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathFindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}