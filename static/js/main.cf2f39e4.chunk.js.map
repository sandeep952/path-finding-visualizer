{"version":3,"sources":["components/InfoModal.js","components/Node/Node.js","components/PathFindingVisualizer.js","algorithms.js","App.js","reportWebVitals.js","index.js"],"names":["tutorial","title","content","InfoModal","props","showModal","toggleModal","useState","currStep","setcurrStep","isLastSlide","length","isFirstSlide","Modal","isOpen","toggle","ModalHeader","style","fontSize","className","ModalBody","ModalFooter","Button","color","onClick","disabled","Node","this","id","row","col","isStart","isFinish","wallMode","isWall","toggleWall","toggleStartFinish","nodeType","classNames","Component","columns","PathFindingVisualizer","setState","state","grid","startRow","startCol","finishRow","finishCol","distance","bind","toggleWallMode","initalizeGrid","reset","visualize","screenSize","window","screen","availWidth","updatedGrid","newGrid","cols","push","isVisited","location","reload","start","dest","rows","visitedNodes","visited","queue","prev","directions","visRow","prevRow","destinationFound","size","i","currNode","shift","currX","currY","k","direction","nextX","nextY","path","destNode","reverse","traceBackPath","bfs","animateBFS","setTimeout","animatePath","document","getElementById","classList","add","nodeSeq","console","log","Fragment","type","checked","onChange","htmlFor","visibility","map","rowIndex","lineWidth","element","colIndex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.cf2f39e4.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\n\nconst tutorial = [\n  {\n    title: \"Welcome to Pathfinding Visualizer\",\n    content: [\n      `This short tutorial will walk you through all of the features of this application.`,\n      `If you want to dive right in, feel free to press the \"Skip Tutorial\" button below. Otherwise, press \"Next\"!`,\n    ],\n  },\n  {\n    title: \"What is a pathfinding algorithm?\",\n    content: [\n      `A pathfinding algorithm finds the shortest path between two points. This application visualizes Breadth First Search (BFS) pathfinding algorithm!`,\n      `A BFS alogrithm moves level by level.\n      We can either move right,left ,up or down and movements from a node to another have a \"cost\" of 1.`,\n    ],\n  },\n  {\n    title: \"Adding walls \",\n    content: [\n      `You can switch to wall mode by clicking on the checkbox and add walls in the grid.`,\n      `A wall will block the path and will now allow you to go through.`,\n    ],\n  },\n];\n\nconst InfoModal = (props) => {\n  const { showModal, toggleModal } = props;\n\n  const [currStep, setcurrStep] = useState(0);\n\n  const nextStep = () => setcurrStep(currStep + 1);\n\n  const previousStep = () => setcurrStep(currStep - 1);\n  const isLastSlide = currStep === tutorial.length - 1;\n  const isFirstSlide = currStep === 0;\n\n  return (\n    <div>\n      <Modal isOpen={showModal} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>\n          <span style={{ fontSize: 28 }} className=\"text-center\">\n            {tutorial[currStep].title}\n          </span>\n        </ModalHeader>\n        <ModalBody>\n          <div className=\"text-center lead\">\n            <p>{tutorial[currStep].content[0]}</p>\n\n            <p style={{ fontSize: 18 }}>{tutorial[currStep].content[1]}</p>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            {isLastSlide ? \"Finish\" : \"Skip tutorial\"}\n          </Button>\n          {!isFirstSlide && (\n            <Button color=\"primary\" onClick={previousStep}>\n              Previous\n            </Button>\n          )}\n          <Button color=\"primary\" onClick={nextStep} disabled={isLastSlide}>\n            Next\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n};\n\nexport default InfoModal;\n","import React, { Component } from \"react\";\nimport \"./Node.css\";\nimport classNames from \"classnames\";\nclass Node extends Component {\n  render() {\n    let {\n      id,\n      row,\n      col,\n      isStart,\n      isFinish,\n      wallMode,\n      isWall,\n      toggleWall,\n      toggleStartFinish,\n      nodeType = \"\",\n    } = this.props;\n    return (\n      <div\n        id={id}\n        onClick={wallMode ? () => toggleWall(row, col) : toggleStartFinish}\n        className={classNames(\"box border border-primary\", {\n          \"start-node\": isStart,\n          \"destination-node\": isFinish,\n          \"wall-node\": isWall,\n          [nodeType]: true,\n        })}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport { bfs, traceBackPath } from \"../algorithms\";\nimport InfoModal from \"./InfoModal\";\nimport Node from \"./Node/Node\";\nlet rows = 16;\nlet columns = 50;\nclass PathFindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      wallMode: false,\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n      distance: null,\n      showModal: true,\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n    this.toggleWall = this.toggleWall.bind(this);\n    this.toggleWallMode = this.toggleWallMode.bind(this);\n    this.toggleStartFinish = this.toggleStartFinish.bind(this);\n    this.initalizeGrid = this.initalizeGrid.bind(this);\n    this.reset = this.reset.bind(this);\n    this.visualize = this.visualize.bind(this);\n  }\n\n  componentDidMount() {\n    let screenSize = window.screen.availWidth;\n\n    if (screenSize < 1300 && screenSize > 700) {\n      columns = 25;\n    } else if (screenSize < 700 && screenSize > 500) {\n      columns = 20;\n    } else if (screenSize < 500) {\n      columns = 14;\n    }\n    this.initalizeGrid();\n  }\n\n  toggleModal = () => {\n    this.setState({\n      showModal: !this.state.showModal,\n    });\n  };\n\n  toggleStartFinish(row, col) {\n    let { grid } = this.state;\n    let { startRow, startCol, finishRow, finishCol } = this.state;\n    let updatedGrid = [...grid];\n\n    if (\n      startRow != null &&\n      startCol != null &&\n      finishRow != null &&\n      finishCol != null\n    )\n      return;\n    if (startRow != null && startCol != null) {\n      updatedGrid[row][col].isFinish = true;\n      finishRow = row;\n      finishCol = col;\n    } else {\n      updatedGrid[row][col].isStart = true;\n      startRow = row;\n      startCol = col;\n    }\n    this.setState({\n      grid: updatedGrid,\n      startRow,\n      startCol,\n      finishRow,\n      finishCol,\n    });\n  }\n  toggleWall(row, col) {\n    let { grid } = this.state;\n    let newGrid = [...grid];\n    newGrid[row][col].isWall = true;\n    this.setState({\n      grid: newGrid,\n    });\n  }\n\n  initalizeGrid() {\n    let grid = [];\n\n    for (let row = 0; row < rows; row++) {\n      let cols = [];\n      for (let col = 0; col < columns; col++) {\n        cols.push({\n          row,\n          col,\n          isStart: false,\n          isFinish: false,\n          isVisited: false,\n        });\n      }\n      grid.push(cols);\n    }\n    this.setState({\n      grid,\n      wallMode: false,\n      startRow: null,\n      startCol: null,\n      finishRow: null,\n      finishCol: null,\n      showModal: true,\n    });\n  }\n\n  reset() {\n    // this.initalizeGrid();\n    window.location.reload();\n  }\n\n  visualize() {\n    let { grid, startRow, startCol, finishRow, finishCol } = this.state;\n    if (\n      startRow == null ||\n      startCol == null ||\n      !finishRow == null ||\n      finishCol == null\n    )\n      return;\n\n    let { visitedNodes, path, distance } = bfs(\n      grid[startRow][startCol],\n      grid[finishRow][finishCol],\n      grid,\n      rows,\n      columns\n    );\n\n    this.animateBFS(visitedNodes, grid);\n    setTimeout(() => {\n      this.animatePath(path);\n      this.setState({\n        distance,\n      });\n    }, visitedNodes.length * 25);\n  }\n\n  animatePath(path) {\n    for (let i = 1; i < path.length - 1; i++) {\n      setTimeout(() => {\n        let currNode = path[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"path-node\");\n      }, i * 25);\n    }\n  }\n\n  animateBFS(nodeSeq, grid) {\n    for (let i = 1; i < nodeSeq.length - 1; i++) {\n      setTimeout(() => {\n        let currNode = nodeSeq[i];\n        document\n          .getElementById(`node-${currNode.row}-${currNode.col}`)\n          .classList.add(\"visited-node\");\n      }, i * 25);\n    }\n  }\n  toggleWallMode() {\n    this.setState({\n      wallMode: !this.state.wallMode,\n    });\n  }\n\n  render() {\n    console.log(\"rendering \");\n    let { grid, distance, wallMode,showModal } = this.state;\n    return (\n      <React.Fragment>\n        <InfoModal showModal={showModal} toggleModal={this.toggleModal} />\n        <h3>Path Finding Visualizer</h3>\n        <button className=\"btn btn-primary m-1\" onClick={this.reset}>\n          Reset\n        </button>\n        <button className=\"btn btn-warning\" onClick={this.visualize}>\n          Visualize\n        </button>\n        <div className=\"m-1\">\n          <div className=\"info-tab\">\n            <Node nodeType=\"start-node\" />\n            <span className=\"info-text\">Start</span>\n          </div>\n          <div className=\"info-tab\">\n            <Node nodeType=\"destination-node\" />\n            <span className=\"info-text\"> Destination</span>\n          </div>\n          <div className=\"info-tab\">\n            <Node nodeType=\"visited-node\" />\n            <span className=\"info-text\">Visited</span>\n          </div>\n          <div className=\"info-tab\">\n            <Node nodeType=\"path-node\" />\n            <span className=\"info-text\">Path</span>\n          </div>\n\n          <div className=\"custom-control custom-checkbox\">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"wallMode\"\n              checked={wallMode}\n              onChange={this.toggleWallMode}\n            />\n            <label className=\"custom-control-label\" htmlFor=\"wallMode\">\n              WallMode\n            </label>\n          </div>\n        </div>\n        <p\n          className=\"distance lead\"\n          style={{ visibility: distance ? \"visible\" : \"hidden\" }}\n        >\n          {distance !== -1\n            ? `Shortest Distance is ${distance}`\n            : \"NO PATH FOUND\"}\n        </p>\n        <div className=\"visualizer\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={`row${rowIndex}`} style={{ lineWidth: \"0px\" }}>\n                {row.map((element, colIndex) => (\n                  <Node\n                    id={`node-${rowIndex}-${colIndex}`}\n                    wallMode={wallMode}\n                    toggleWall={this.toggleWall}\n                    key={`node-${rowIndex}-${colIndex}`}\n                    {...grid[rowIndex][colIndex]}\n                    toggleStartFinish={() =>\n                      this.toggleStartFinish(rowIndex, colIndex)\n                    }\n                  />\n                ))}\n              </div>\n            );\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PathFindingVisualizer;\n","export function bfs(start, dest, grid, rows, cols) {\n  // list to store the sequence of visited nodes\n  let visitedNodes = [];\n  let visited = [];\n  let queue = [];\n  let prev = [];\n  const directions = [\n    [0, 1], //up\n    [1, 0], //right\n    [0, -1], //down\n    [-1, 0], //left\n  ];\n\n  for (let row = 0; row < rows; row++) {\n    let visRow = [];\n    let prevRow = [];\n    for (let col = 0; col < cols; col++) {\n      visRow.push(false);\n      prevRow.push(null);\n    }\n    visited.push(visRow);\n    prev.push(prevRow);\n  }\n\n  queue.push(start);\n  visited[start.row][start.col] = true;\n\n  let distance = 0;\n  let destinationFound = false;\n  while (queue.length !== 0 && !destinationFound) {\n    let size = queue.length;\n    for (let i = 0; i < size; i++) {\n      let currNode = queue.shift();\n      let currX = currNode.row;\n      let currY = currNode.col;\n\n      visitedNodes.push(currNode);\n\n      for (let k = 0; k < directions.length; k++) {\n        let direction = directions[k];\n        let nextX = currX + direction[0];\n        let nextY = currY + direction[1];\n\n        if (\n          nextX >= 0 &&\n          nextX < rows &&\n          nextY >= 0 &&\n          nextY < cols &&\n          !visited[nextX][nextY]\n        ) {\n          if(grid[nextX][nextY].isWall)\n          continue\n          if (nextX === dest.row && nextY === dest.col) {\n            prev[nextX][nextY] = currNode;\n            destinationFound = true;\n            break;\n          }\n\n          queue.push(grid[nextX][nextY]);\n          prev[nextX][nextY] = currNode;\n          visited[nextX][nextY] = true;\n        }\n      }\n    }\n    distance++;\n  }\n  let path = traceBackPath(grid, prev, dest);\n  if(!path[0].isStart){\n    distance = -1;\n  }\n  return {\n    visitedNodes,\n    path,\n    distance,\n  };\n}\n\nexport function traceBackPath(grid, prev, destNode) {\n  let path = [];\n  let currNode = grid[destNode.row][destNode.col];\n  while (currNode != null) {\n    path.push(currNode);\n    currNode = prev[currNode.row][currNode.col];\n  }\n  path.reverse();\n  return path;\n}\n","import \"./App.css\";\nimport PathFindingVisualizer from \"./components/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App mt-1\">\n      <PathFindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}